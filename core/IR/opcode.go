// Note this file is created by makeType.sh
// Don't modify it directly
package IR

type (
	Opcode uint16
	Op     struct {
		Code Opcode
		Gas  uint64
		Name string
	}
)

var Ops [0xffff]Op

func NewOp(code Opcode, gas uint64, name string) Opcode {
	o := Op{code, gas, name}
	Ops[code] = o
	return code
}

var (
	OPCunreachable                = NewOp(0x0000, 1, "unreachable")
	OPCbr                         = NewOp(0x000c, 1, "br")
	OPCbr_if                      = NewOp(0x000d, 1, "br_if")
	OPCbr_table                   = NewOp(0x000e, 1, "br_table")
	OPCreturn_                    = NewOp(0x000f, 1, "return")
	OPCcall                       = NewOp(0x0010, 1, "call")
	OPCcall_indirect              = NewOp(0x0011, 1, "call_indirect")
	OPCdrop                       = NewOp(0x001a, 1, "drop")
	OPCselect                     = NewOp(0x001b, 1, "select")
	OPCget_local                  = NewOp(0x0020, 1, "get_local")
	OPCset_local                  = NewOp(0x0021, 1, "set_local")
	OPCtee_local                  = NewOp(0x0022, 1, "tee_local")
	OPCget_global                 = NewOp(0x0023, 1, "get_global")
	OPCset_global                 = NewOp(0x0024, 1, "set_global")
	OPCtable_get                  = NewOp(0x0025, 1, "table.get")
	OPCtable_set                  = NewOp(0x0026, 1, "table.set")
	OPCthrow_                     = NewOp(0xfb00, 1, "throw")
	OPCrethrow                    = NewOp(0xfb01, 1, "rethrow")
	OPCnop                        = NewOp(0x0001, 1, "nop")
	OPCi32_load                   = NewOp(0x0028, 1, "i32.load")
	OPCi64_load                   = NewOp(0x0029, 1, "i64.load")
	OPCf32_load                   = NewOp(0x002a, 1, "f32.load")
	OPCf64_load                   = NewOp(0x002b, 1, "f64.load")
	OPCi32_load8_s                = NewOp(0x002c, 1, "i32.load8_s")
	OPCi32_load8_u                = NewOp(0x002d, 1, "i32.load8_u")
	OPCi32_load16_s               = NewOp(0x002e, 1, "i32.load16_s")
	OPCi32_load16_u               = NewOp(0x002f, 1, "i32.load16_u")
	OPCi64_load8_s                = NewOp(0x0030, 1, "i64.load8_s")
	OPCi64_load8_u                = NewOp(0x0031, 1, "i64.load8_u")
	OPCi64_load16_s               = NewOp(0x0032, 1, "i64.load16_s")
	OPCi64_load16_u               = NewOp(0x0033, 1, "i64.load16_u")
	OPCi64_load32_s               = NewOp(0x0034, 1, "i64.load32_s")
	OPCi64_load32_u               = NewOp(0x0035, 1, "i64.load32_u")
	OPCi32_store                  = NewOp(0x0036, 1, "i32.store")
	OPCi64_store                  = NewOp(0x0037, 1, "i64.store")
	OPCf32_store                  = NewOp(0x0038, 1, "f32.store")
	OPCf64_store                  = NewOp(0x0039, 1, "f64.store")
	OPCi32_store8                 = NewOp(0x003a, 1, "i32.store8")
	OPCi32_store16                = NewOp(0x003b, 1, "i32.store16")
	OPCi64_store8                 = NewOp(0x003c, 1, "i64.store8")
	OPCi64_store16                = NewOp(0x003d, 1, "i64.store16")
	OPCi64_store32                = NewOp(0x003e, 1, "i64.store32")
	OPCmemory_size                = NewOp(0x003f, 1, "memory.size")
	OPCmemory_grow                = NewOp(0x0040, 1, "memory.grow")
	OPCi32_const                  = NewOp(0x0041, 1, "i32.const")
	OPCi64_const                  = NewOp(0x0042, 1, "i64.const")
	OPCf32_const                  = NewOp(0x0043, 1, "f32.const")
	OPCf64_const                  = NewOp(0x0044, 1, "f64.const")
	OPCi32_eqz                    = NewOp(0x0045, 1, "i32.eqz")
	OPCi32_eq                     = NewOp(0x0046, 1, "i32.eq")
	OPCi32_ne                     = NewOp(0x0047, 1, "i32.ne")
	OPCi32_lt_s                   = NewOp(0x0048, 1, "i32.lt_s")
	OPCi32_lt_u                   = NewOp(0x0049, 1, "i32.lt_u")
	OPCi32_gt_s                   = NewOp(0x004a, 1, "i32.gt_s")
	OPCi32_gt_u                   = NewOp(0x004b, 1, "i32.gt_u")
	OPCi32_le_s                   = NewOp(0x004c, 1, "i32.le_s")
	OPCi32_le_u                   = NewOp(0x004d, 1, "i32.le_u")
	OPCi32_ge_s                   = NewOp(0x004e, 1, "i32.ge_s")
	OPCi32_ge_u                   = NewOp(0x004f, 1, "i32.ge_u")
	OPCi64_eqz                    = NewOp(0x0050, 1, "i64.eqz")
	OPCi64_eq                     = NewOp(0x0051, 1, "i64.eq")
	OPCi64_ne                     = NewOp(0x0052, 1, "i64.ne")
	OPCi64_lt_s                   = NewOp(0x0053, 1, "i64.lt_s")
	OPCi64_lt_u                   = NewOp(0x0054, 1, "i64.lt_u")
	OPCi64_gt_s                   = NewOp(0x0055, 1, "i64.gt_s")
	OPCi64_gt_u                   = NewOp(0x0056, 1, "i64.gt_u")
	OPCi64_le_s                   = NewOp(0x0057, 1, "i64.le_s")
	OPCi64_le_u                   = NewOp(0x0058, 1, "i64.le_u")
	OPCi64_ge_s                   = NewOp(0x0059, 1, "i64.ge_s")
	OPCi64_ge_u                   = NewOp(0x005a, 1, "i64.ge_u")
	OPCf32_eq                     = NewOp(0x005b, 1, "f32.eq")
	OPCf32_ne                     = NewOp(0x005c, 1, "f32.ne")
	OPCf32_lt                     = NewOp(0x005d, 1, "f32.lt")
	OPCf32_gt                     = NewOp(0x005e, 1, "f32.gt")
	OPCf32_le                     = NewOp(0x005f, 1, "f32.le")
	OPCf32_ge                     = NewOp(0x0060, 1, "f32.ge")
	OPCf64_eq                     = NewOp(0x0061, 1, "f64.eq")
	OPCf64_ne                     = NewOp(0x0062, 1, "f64.ne")
	OPCf64_lt                     = NewOp(0x0063, 1, "f64.lt")
	OPCf64_gt                     = NewOp(0x0064, 1, "f64.gt")
	OPCf64_le                     = NewOp(0x0065, 1, "f64.le")
	OPCf64_ge                     = NewOp(0x0066, 1, "f64.ge")
	OPCi32_clz                    = NewOp(0x0067, 1, "i32.clz")
	OPCi32_ctz                    = NewOp(0x0068, 1, "i32.ctz")
	OPCi32_popcnt                 = NewOp(0x0069, 1, "i32.popcnt")
	OPCi32_add                    = NewOp(0x006a, 1, "i32.add")
	OPCi32_sub                    = NewOp(0x006b, 1, "i32.sub")
	OPCi32_mul                    = NewOp(0x006c, 1, "i32.mul")
	OPCi32_div_s                  = NewOp(0x006d, 1, "i32.div_s")
	OPCi32_div_u                  = NewOp(0x006e, 1, "i32.div_u")
	OPCi32_rem_s                  = NewOp(0x006f, 1, "i32.rem_s")
	OPCi32_rem_u                  = NewOp(0x0070, 1, "i32.rem_u")
	OPCi32_and_                   = NewOp(0x0071, 1, "i32.and")
	OPCi32_or_                    = NewOp(0x0072, 1, "i32.or")
	OPCi32_xor_                   = NewOp(0x0073, 1, "i32.xor")
	OPCi32_shl                    = NewOp(0x0074, 1, "i32.shl")
	OPCi32_shr_s                  = NewOp(0x0075, 1, "i32.shr_s")
	OPCi32_shr_u                  = NewOp(0x0076, 1, "i32.shr_u")
	OPCi32_rotl                   = NewOp(0x0077, 1, "i32.rotl")
	OPCi32_rotr                   = NewOp(0x0078, 1, "i32.rotr")
	OPCi64_clz                    = NewOp(0x0079, 1, "i64.clz")
	OPCi64_ctz                    = NewOp(0x007a, 1, "i64.ctz")
	OPCi64_popcnt                 = NewOp(0x007b, 1, "i64.popcnt")
	OPCi64_add                    = NewOp(0x007c, 1, "i64.add")
	OPCi64_sub                    = NewOp(0x007d, 1, "i64.sub")
	OPCi64_mul                    = NewOp(0x007e, 1, "i64.mul")
	OPCi64_div_s                  = NewOp(0x007f, 1, "i64.div_s")
	OPCi64_div_u                  = NewOp(0x0080, 1, "i64.div_u")
	OPCi64_rem_s                  = NewOp(0x0081, 1, "i64.rem_s")
	OPCi64_rem_u                  = NewOp(0x0082, 1, "i64.rem_u")
	OPCi64_and_                   = NewOp(0x0083, 1, "i64.and")
	OPCi64_or_                    = NewOp(0x0084, 1, "i64.or")
	OPCi64_xor_                   = NewOp(0x0085, 1, "i64.xor")
	OPCi64_shl                    = NewOp(0x0086, 1, "i64.shl")
	OPCi64_shr_s                  = NewOp(0x0087, 1, "i64.shr_s")
	OPCi64_shr_u                  = NewOp(0x0088, 1, "i64.shr_u")
	OPCi64_rotl                   = NewOp(0x0089, 1, "i64.rotl")
	OPCi64_rotr                   = NewOp(0x008a, 1, "i64.rotr")
	OPCf32_abs                    = NewOp(0x008b, 1, "f32.abs")
	OPCf32_neg                    = NewOp(0x008c, 1, "f32.neg")
	OPCf32_ceil                   = NewOp(0x008d, 1, "f32.ceil")
	OPCf32_floor                  = NewOp(0x008e, 1, "f32.floor")
	OPCf32_trunc                  = NewOp(0x008f, 1, "f32.trunc")
	OPCf32_nearest                = NewOp(0x0090, 1, "f32.nearest")
	OPCf32_sqrt                   = NewOp(0x0091, 1, "f32.sqrt")
	OPCf32_add                    = NewOp(0x0092, 1, "f32.add")
	OPCf32_sub                    = NewOp(0x0093, 1, "f32.sub")
	OPCf32_mul                    = NewOp(0x0094, 1, "f32.mul")
	OPCf32_div                    = NewOp(0x0095, 1, "f32.div")
	OPCf32_min                    = NewOp(0x0096, 1, "f32.min")
	OPCf32_max                    = NewOp(0x0097, 1, "f32.max")
	OPCf32_copysign               = NewOp(0x0098, 1, "f32.copysign")
	OPCf64_abs                    = NewOp(0x0099, 1, "f64.abs")
	OPCf64_neg                    = NewOp(0x009a, 1, "f64.neg")
	OPCf64_ceil                   = NewOp(0x009b, 1, "f64.ceil")
	OPCf64_floor                  = NewOp(0x009c, 1, "f64.floor")
	OPCf64_trunc                  = NewOp(0x009d, 1, "f64.trunc")
	OPCf64_nearest                = NewOp(0x009e, 1, "f64.nearest")
	OPCf64_sqrt                   = NewOp(0x009f, 1, "f64.sqrt")
	OPCf64_add                    = NewOp(0x00a0, 1, "f64.add")
	OPCf64_sub                    = NewOp(0x00a1, 1, "f64.sub")
	OPCf64_mul                    = NewOp(0x00a2, 1, "f64.mul")
	OPCf64_div                    = NewOp(0x00a3, 1, "f64.div")
	OPCf64_min                    = NewOp(0x00a4, 1, "f64.min")
	OPCf64_max                    = NewOp(0x00a5, 1, "f64.max")
	OPCf64_copysign               = NewOp(0x00a6, 1, "f64.copysign")
	OPCi32_wrap_i64               = NewOp(0x00a7, 1, "i32.wrap/i64")
	OPCi32_trunc_s_f32            = NewOp(0x00a8, 1, "i32.trunc_s/f32")
	OPCi32_trunc_u_f32            = NewOp(0x00a9, 1, "i32.trunc_u/f32")
	OPCi32_trunc_s_f64            = NewOp(0x00aa, 1, "i32.trunc_s/f64")
	OPCi32_trunc_u_f64            = NewOp(0x00ab, 1, "i32.trunc_u/f64")
	OPCi64_extend_s_i32           = NewOp(0x00ac, 1, "i64.extend_s/i32")
	OPCi64_extend_u_i32           = NewOp(0x00ad, 1, "i64.extend_u/i32")
	OPCi64_trunc_s_f32            = NewOp(0x00ae, 1, "i64.trunc_s/f32")
	OPCi64_trunc_u_f32            = NewOp(0x00af, 1, "i64.trunc_u/f32")
	OPCi64_trunc_s_f64            = NewOp(0x00b0, 1, "i64.trunc_s/f64")
	OPCi64_trunc_u_f64            = NewOp(0x00b1, 1, "i64.trunc_u/f64")
	OPCf32_convert_s_i32          = NewOp(0x00b2, 1, "f32.convert_s/i32")
	OPCf32_convert_u_i32          = NewOp(0x00b3, 1, "f32.convert_u/i32")
	OPCf32_convert_s_i64          = NewOp(0x00b4, 1, "f32.convert_s/i64")
	OPCf32_convert_u_i64          = NewOp(0x00b5, 1, "f32.convert_u/i64")
	OPCf32_demote_f64             = NewOp(0x00b6, 1, "f32.demote/f64")
	OPCf64_convert_s_i32          = NewOp(0x00b7, 1, "f64.convert_s/i32")
	OPCf64_convert_u_i32          = NewOp(0x00b8, 1, "f64.convert_u/i32")
	OPCf64_convert_s_i64          = NewOp(0x00b9, 1, "f64.convert_s/i64")
	OPCf64_convert_u_i64          = NewOp(0x00ba, 1, "f64.convert_u/i64")
	OPCf64_promote_f32            = NewOp(0x00bb, 1, "f64.promote/f32")
	OPCi32_reinterpret_f32        = NewOp(0x00bc, 1, "i32.reinterpret/f32")
	OPCi64_reinterpret_f64        = NewOp(0x00bd, 1, "i64.reinterpret/f64")
	OPCf32_reinterpret_i32        = NewOp(0x00be, 1, "f32.reinterpret/i32")
	OPCf64_reinterpret_i64        = NewOp(0x00bf, 1, "f64.reinterpret/i64")
	OPCi32_extend8_s              = NewOp(0x00c0, 1, "i32.extend8_s")
	OPCi32_extend16_s             = NewOp(0x00c1, 1, "i32.extend16_s")
	OPCi64_extend8_s              = NewOp(0x00c2, 1, "i64.extend8_s")
	OPCi64_extend16_s             = NewOp(0x00c3, 1, "i64.extend16_s")
	OPCi64_extend32_s             = NewOp(0x00c4, 1, "i64.extend32_s")
	OPCref_null                   = NewOp(0x00d0, 1, "ref.null")
	OPCref_isnull                 = NewOp(0x00d1, 1, "ref.isnull")
	OPCref_func                   = NewOp(0x00d2, 1, "ref.func")
	OPCi32_trunc_s_sat_f32        = NewOp(0xfc00, 1, "i32.trunc_s:sat/f32")
	OPCi32_trunc_u_sat_f32        = NewOp(0xfc01, 1, "i32.trunc_u:sat/f32")
	OPCi32_trunc_s_sat_f64        = NewOp(0xfc02, 1, "i32.trunc_s:sat/f64")
	OPCi32_trunc_u_sat_f64        = NewOp(0xfc03, 1, "i32.trunc_u:sat/f64")
	OPCi64_trunc_s_sat_f32        = NewOp(0xfc04, 1, "i64.trunc_s:sat/f32")
	OPCi64_trunc_u_sat_f32        = NewOp(0xfc05, 1, "i64.trunc_u:sat/f32")
	OPCi64_trunc_s_sat_f64        = NewOp(0xfc06, 1, "i64.trunc_s:sat/f64")
	OPCi64_trunc_u_sat_f64        = NewOp(0xfc07, 1, "i64.trunc_u:sat/f64")
	OPCmemory_init                = NewOp(0xfc08, 1, "memory.init")
	OPCmemory_drop                = NewOp(0xfc09, 1, "memory.drop")
	OPCmemory_copy                = NewOp(0xfc0a, 1, "memory.copy")
	OPCmemory_fill                = NewOp(0xfc0b, 1, "memory.fill")
	OPCtable_init                 = NewOp(0xfc0c, 1, "table.init")
	OPCtable_drop                 = NewOp(0xfc0d, 1, "table.drop")
	OPCtable_copy                 = NewOp(0xfc0e, 1, "table.copy")
	OPCv128_const                 = NewOp(0xfd00, 1, "v128.const")
	OPCv128_load                  = NewOp(0xfd01, 1, "v128.load")
	OPCv128_store                 = NewOp(0xfd02, 1, "v128.store")
	OPCi8x16_splat                = NewOp(0xfd03, 1, "i8x16.splat")
	OPCi16x8_splat                = NewOp(0xfd04, 1, "i16x8.splat")
	OPCi32x4_splat                = NewOp(0xfd05, 1, "i32x4.splat")
	OPCi64x2_splat                = NewOp(0xfd06, 1, "i64x2.splat")
	OPCf32x4_splat                = NewOp(0xfd07, 1, "f32x4.splat")
	OPCf64x2_splat                = NewOp(0xfd08, 1, "f64x2.splat")
	OPCi8x16_extract_lane_s       = NewOp(0xfd09, 1, "i8x16.extract_lane_s")
	OPCi8x16_extract_lane_u       = NewOp(0xfd0a, 1, "i8x16.extract_lane_u")
	OPCi16x8_extract_lane_s       = NewOp(0xfd0b, 1, "i16x8.extract_lane_s")
	OPCi16x8_extract_lane_u       = NewOp(0xfd0c, 1, "i16x8.extract_lane_u")
	OPCi32x4_extract_lane         = NewOp(0xfd0d, 1, "i32x4.extract_lane")
	OPCi64x2_extract_lane         = NewOp(0xfd0e, 1, "i64x2.extract_lane")
	OPCf32x4_extract_lane         = NewOp(0xfd0f, 1, "f32x4.extract_lane")
	OPCf64x2_extract_lane         = NewOp(0xfd10, 1, "f64x2.extract_lane")
	OPCi8x16_replace_lane         = NewOp(0xfd11, 1, "i8x16.replace_lane")
	OPCi16x8_replace_lane         = NewOp(0xfd12, 1, "i16x8.replace_lane")
	OPCi32x4_replace_lane         = NewOp(0xfd13, 1, "i32x4.replace_lane")
	OPCi64x2_replace_lane         = NewOp(0xfd14, 1, "i64x2.replace_lane")
	OPCf32x4_replace_lane         = NewOp(0xfd15, 1, "f32x4.replace_lane")
	OPCf64x2_replace_lane         = NewOp(0xfd16, 1, "f64x2.replace_lane")
	OPCv8x16_shuffle              = NewOp(0xfd17, 1, "v8x16.shuffle")
	OPCi8x16_add                  = NewOp(0xfd18, 1, "i8x16.add")
	OPCi16x8_add                  = NewOp(0xfd19, 1, "i16x8.add")
	OPCi32x4_add                  = NewOp(0xfd1a, 1, "i32x4.add")
	OPCi64x2_add                  = NewOp(0xfd1b, 1, "i64x2.add")
	OPCi8x16_sub                  = NewOp(0xfd1c, 1, "i8x16.sub")
	OPCi16x8_sub                  = NewOp(0xfd1d, 1, "i16x8.sub")
	OPCi32x4_sub                  = NewOp(0xfd1e, 1, "i32x4.sub")
	OPCi64x2_sub                  = NewOp(0xfd1f, 1, "i64x2.sub")
	OPCi8x16_mul                  = NewOp(0xfd20, 1, "i8x16.mul")
	OPCi16x8_mul                  = NewOp(0xfd21, 1, "i16x8.mul")
	OPCi32x4_mul                  = NewOp(0xfd22, 1, "i32x4.mul")
	OPCi8x16_neg                  = NewOp(0xfd24, 1, "i8x16.neg")
	OPCi16x8_neg                  = NewOp(0xfd25, 1, "i16x8.neg")
	OPCi32x4_neg                  = NewOp(0xfd26, 1, "i32x4.neg")
	OPCi64x2_neg                  = NewOp(0xfd27, 1, "i64x2.neg")
	OPCi8x16_add_saturate_s       = NewOp(0xfd28, 1, "i8x16.add_saturate_s")
	OPCi8x16_add_saturate_u       = NewOp(0xfd29, 1, "i8x16.add_saturate_u")
	OPCi16x8_add_saturate_s       = NewOp(0xfd2a, 1, "i16x8.add_saturate_s")
	OPCi16x8_add_saturate_u       = NewOp(0xfd2b, 1, "i16x8.add_saturate_u")
	OPCi8x16_sub_saturate_s       = NewOp(0xfd2c, 1, "i8x16.sub_saturate_s")
	OPCi8x16_sub_saturate_u       = NewOp(0xfd2d, 1, "i8x16.sub_saturate_u")
	OPCi16x8_sub_saturate_s       = NewOp(0xfd2e, 1, "i16x8.sub_saturate_s")
	OPCi16x8_sub_saturate_u       = NewOp(0xfd2f, 1, "i16x8.sub_saturate_u")
	OPCi8x16_shl                  = NewOp(0xfd30, 1, "i8x16.shl")
	OPCi16x8_shl                  = NewOp(0xfd31, 1, "i16x8.shl")
	OPCi32x4_shl                  = NewOp(0xfd32, 1, "i32x4.shl")
	OPCi64x2_shl                  = NewOp(0xfd33, 1, "i64x2.shl")
	OPCi8x16_shr_s                = NewOp(0xfd34, 1, "i8x16.shr_s")
	OPCi8x16_shr_u                = NewOp(0xfd35, 1, "i8x16.shr_u")
	OPCi16x8_shr_s                = NewOp(0xfd36, 1, "i16x8.shr_s")
	OPCi16x8_shr_u                = NewOp(0xfd37, 1, "i16x8.shr_u")
	OPCi32x4_shr_s                = NewOp(0xfd38, 1, "i32x4.shr_s")
	OPCi32x4_shr_u                = NewOp(0xfd39, 1, "i32x4.shr_u")
	OPCi64x2_shr_s                = NewOp(0xfd3a, 1, "i64x2.shr_s")
	OPCi64x2_shr_u                = NewOp(0xfd3b, 1, "i64x2.shr_u")
	OPCv128_and                   = NewOp(0xfd3c, 1, "v128.and")
	OPCv128_or                    = NewOp(0xfd3d, 1, "v128.or")
	OPCv128_xor                   = NewOp(0xfd3e, 1, "v128.xor")
	OPCv128_not                   = NewOp(0xfd3f, 1, "v128.not")
	OPCv128_bitselect             = NewOp(0xfd40, 1, "v128.bitselect")
	OPCi8x16_any_true             = NewOp(0xfd41, 1, "i8x16.any_true")
	OPCi16x8_any_true             = NewOp(0xfd42, 1, "i16x8.any_true")
	OPCi32x4_any_true             = NewOp(0xfd43, 1, "i32x4.any_true")
	OPCi64x2_any_true             = NewOp(0xfd44, 1, "i64x2.any_true")
	OPCi8x16_all_true             = NewOp(0xfd45, 1, "i8x16.all_true")
	OPCi16x8_all_true             = NewOp(0xfd46, 1, "i16x8.all_true")
	OPCi32x4_all_true             = NewOp(0xfd47, 1, "i32x4.all_true")
	OPCi64x2_all_true             = NewOp(0xfd48, 1, "i64x2.all_true")
	OPCi8x16_eq                   = NewOp(0xfd49, 1, "i8x16.eq")
	OPCi16x8_eq                   = NewOp(0xfd4a, 1, "i16x8.eq")
	OPCi32x4_eq                   = NewOp(0xfd4b, 1, "i32x4.eq")
	OPCf32x4_eq                   = NewOp(0xfd4d, 1, "f32x4.eq")
	OPCf64x2_eq                   = NewOp(0xfd4e, 1, "f64x2.eq")
	OPCi8x16_ne                   = NewOp(0xfd4f, 1, "i8x16.ne")
	OPCi16x8_ne                   = NewOp(0xfd50, 1, "i16x8.ne")
	OPCi32x4_ne                   = NewOp(0xfd51, 1, "i32x4.ne")
	OPCf32x4_ne                   = NewOp(0xfd53, 1, "f32x4.ne")
	OPCf64x2_ne                   = NewOp(0xfd54, 1, "f64x2.ne")
	OPCi8x16_lt_s                 = NewOp(0xfd55, 1, "i8x16.lt_s")
	OPCi8x16_lt_u                 = NewOp(0xfd56, 1, "i8x16.lt_u")
	OPCi16x8_lt_s                 = NewOp(0xfd57, 1, "i16x8.lt_s")
	OPCi16x8_lt_u                 = NewOp(0xfd58, 1, "i16x8.lt_u")
	OPCi32x4_lt_s                 = NewOp(0xfd59, 1, "i32x4.lt_s")
	OPCi32x4_lt_u                 = NewOp(0xfd5a, 1, "i32x4.lt_u")
	OPCf32x4_lt                   = NewOp(0xfd5d, 1, "f32x4.lt")
	OPCf64x2_lt                   = NewOp(0xfd5e, 1, "f64x2.lt")
	OPCi8x16_le_s                 = NewOp(0xfd5f, 1, "i8x16.le_s")
	OPCi8x16_le_u                 = NewOp(0xfd60, 1, "i8x16.le_u")
	OPCi16x8_le_s                 = NewOp(0xfd61, 1, "i16x8.le_s")
	OPCi16x8_le_u                 = NewOp(0xfd62, 1, "i16x8.le_u")
	OPCi32x4_le_s                 = NewOp(0xfd63, 1, "i32x4.le_s")
	OPCi32x4_le_u                 = NewOp(0xfd64, 1, "i32x4.le_u")
	OPCf32x4_le                   = NewOp(0xfd67, 1, "f32x4.le")
	OPCf64x2_le                   = NewOp(0xfd68, 1, "f64x2.le")
	OPCi8x16_gt_s                 = NewOp(0xfd69, 1, "i8x16.gt_s")
	OPCi8x16_gt_u                 = NewOp(0xfd6a, 1, "i8x16.gt_u")
	OPCi16x8_gt_s                 = NewOp(0xfd6b, 1, "i16x8.gt_s")
	OPCi16x8_gt_u                 = NewOp(0xfd6c, 1, "i16x8.gt_u")
	OPCi32x4_gt_s                 = NewOp(0xfd6d, 1, "i32x4.gt_s")
	OPCi32x4_gt_u                 = NewOp(0xfd6e, 1, "i32x4.gt_u")
	OPCf32x4_gt                   = NewOp(0xfd71, 1, "f32x4.gt")
	OPCf64x2_gt                   = NewOp(0xfd72, 1, "f64x2.gt")
	OPCi8x16_ge_s                 = NewOp(0xfd73, 1, "i8x16.ge_s")
	OPCi8x16_ge_u                 = NewOp(0xfd74, 1, "i8x16.ge_u")
	OPCi16x8_ge_s                 = NewOp(0xfd75, 1, "i16x8.ge_s")
	OPCi16x8_ge_u                 = NewOp(0xfd76, 1, "i16x8.ge_u")
	OPCi32x4_ge_s                 = NewOp(0xfd77, 1, "i32x4.ge_s")
	OPCi32x4_ge_u                 = NewOp(0xfd78, 1, "i32x4.ge_u")
	OPCf32x4_ge                   = NewOp(0xfd7b, 1, "f32x4.ge")
	OPCf64x2_ge                   = NewOp(0xfd7c, 1, "f64x2.ge")
	OPCf32x4_neg                  = NewOp(0xfd7d, 1, "f32x4.neg")
	OPCf64x2_neg                  = NewOp(0xfd7e, 1, "f64x2.neg")
	OPCf32x4_abs                  = NewOp(0xfd7f, 1, "f32x4.abs")
	OPCf64x2_abs                  = NewOp(0xfd80, 1, "f64x2.abs")
	OPCf32x4_min                  = NewOp(0xfd81, 1, "f32x4.min")
	OPCf64x2_min                  = NewOp(0xfd82, 1, "f64x2.min")
	OPCf32x4_max                  = NewOp(0xfd83, 1, "f32x4.max")
	OPCf64x2_max                  = NewOp(0xfd84, 1, "f64x2.max")
	OPCf32x4_add                  = NewOp(0xfd85, 1, "f32x4.add")
	OPCf64x2_add                  = NewOp(0xfd86, 1, "f64x2.add")
	OPCf32x4_sub                  = NewOp(0xfd87, 1, "f32x4.sub")
	OPCf64x2_sub                  = NewOp(0xfd88, 1, "f64x2.sub")
	OPCf32x4_div                  = NewOp(0xfd89, 1, "f32x4.div")
	OPCf64x2_div                  = NewOp(0xfd8a, 1, "f64x2.div")
	OPCf32x4_mul                  = NewOp(0xfd8b, 1, "f32x4.mul")
	OPCf64x2_mul                  = NewOp(0xfd8c, 1, "f64x2.mul")
	OPCf32x4_sqrt                 = NewOp(0xfd8d, 1, "f32x4.sqrt")
	OPCf64x2_sqrt                 = NewOp(0xfd8e, 1, "f64x2.sqrt")
	OPCf32x4_convert_s_i32x4      = NewOp(0xfd8f, 1, "f32x4.convert_s/i32x4")
	OPCf32x4_convert_u_i32x4      = NewOp(0xfd90, 1, "f32x4.convert_u/i32x4")
	OPCf64x2_convert_s_i64x2      = NewOp(0xfd91, 1, "f64x2.convert_s/i64x2")
	OPCf64x2_convert_u_i64x2      = NewOp(0xfd92, 1, "f64x2.convert_u/i64x2")
	OPCi32x4_trunc_s_sat_f32x4    = NewOp(0xfd93, 1, "i32x4.trunc_s:sat/f32x4")
	OPCi32x4_trunc_u_sat_f32x4    = NewOp(0xfd94, 1, "i32x4.trunc_u:sat/f32x4")
	OPCi64x2_trunc_s_sat_f64x2    = NewOp(0xfd95, 1, "i64x2.trunc_s:sat/f64x2")
	OPCi64x2_trunc_u_sat_f64x2    = NewOp(0xfd96, 1, "i64x2.trunc_u:sat/f64x2")
	OPCatomic_wake                = NewOp(0xfe00, 1, "atomic.wake")
	OPCi32_atomic_wait            = NewOp(0xfe01, 1, "i32.atomic.wait")
	OPCi64_atomic_wait            = NewOp(0xfe02, 1, "i64.atomic.wait")
	OPCi32_atomic_load            = NewOp(0xfe10, 1, "i32.atomic.load")
	OPCi64_atomic_load            = NewOp(0xfe11, 1, "i64.atomic.load")
	OPCi32_atomic_load8_u         = NewOp(0xfe12, 1, "i32.atomic.load8_u")
	OPCi32_atomic_load16_u        = NewOp(0xfe13, 1, "i32.atomic.load16_u")
	OPCi64_atomic_load8_u         = NewOp(0xfe14, 1, "i64.atomic.load8_u")
	OPCi64_atomic_load16_u        = NewOp(0xfe15, 1, "i64.atomic.load16_u")
	OPCi64_atomic_load32_u        = NewOp(0xfe16, 1, "i64.atomic.load32_u")
	OPCi32_atomic_store           = NewOp(0xfe17, 1, "i32.atomic.store")
	OPCi64_atomic_store           = NewOp(0xfe18, 1, "i64.atomic.store")
	OPCi32_atomic_store8          = NewOp(0xfe19, 1, "i32.atomic.store8")
	OPCi32_atomic_store16         = NewOp(0xfe1a, 1, "i32.atomic.store16")
	OPCi64_atomic_store8          = NewOp(0xfe1b, 1, "i64.atomic.store8")
	OPCi64_atomic_store16         = NewOp(0xfe1c, 1, "i64.atomic.store16")
	OPCi64_atomic_store32         = NewOp(0xfe1d, 1, "i64.atomic.store32")
	OPCi32_atomic_rmw_add         = NewOp(0xfe1e, 1, "i32.atomic.rmw.add")
	OPCi64_atomic_rmw_add         = NewOp(0xfe1f, 1, "i64.atomic.rmw.add")
	OPCi32_atomic_rmw8_u_add      = NewOp(0xfe20, 1, "i32.atomic.rmw8_u.add")
	OPCi32_atomic_rmw16_u_add     = NewOp(0xfe21, 1, "i32.atomic.rmw16_u.add")
	OPCi64_atomic_rmw8_u_add      = NewOp(0xfe22, 1, "i64.atomic.rmw8_u.add")
	OPCi64_atomic_rmw16_u_add     = NewOp(0xfe23, 1, "i64.atomic.rmw16_u.add")
	OPCi64_atomic_rmw32_u_add     = NewOp(0xfe24, 1, "i64.atomic.rmw32_u.add")
	OPCi32_atomic_rmw_sub         = NewOp(0xfe25, 1, "i32.atomic.rmw.sub")
	OPCi64_atomic_rmw_sub         = NewOp(0xfe26, 1, "i64.atomic.rmw.sub")
	OPCi32_atomic_rmw8_u_sub      = NewOp(0xfe27, 1, "i32.atomic.rmw8_u.sub")
	OPCi32_atomic_rmw16_u_sub     = NewOp(0xfe28, 1, "i32.atomic.rmw16_u.sub")
	OPCi64_atomic_rmw8_u_sub      = NewOp(0xfe29, 1, "i64.atomic.rmw8_u.sub")
	OPCi64_atomic_rmw16_u_sub     = NewOp(0xfe2a, 1, "i64.atomic.rmw16_u.sub")
	OPCi64_atomic_rmw32_u_sub     = NewOp(0xfe2b, 1, "i64.atomic.rmw32_u.sub")
	OPCi32_atomic_rmw_and         = NewOp(0xfe2c, 1, "i32.atomic.rmw.and")
	OPCi64_atomic_rmw_and         = NewOp(0xfe2d, 1, "i64.atomic.rmw.and")
	OPCi32_atomic_rmw8_u_and      = NewOp(0xfe2e, 1, "i32.atomic.rmw8_u.and")
	OPCi32_atomic_rmw16_u_and     = NewOp(0xfe2f, 1, "i32.atomic.rmw16_u.and")
	OPCi64_atomic_rmw8_u_and      = NewOp(0xfe30, 1, "i64.atomic.rmw8_u.and")
	OPCi64_atomic_rmw16_u_and     = NewOp(0xfe31, 1, "i64.atomic.rmw16_u.and")
	OPCi64_atomic_rmw32_u_and     = NewOp(0xfe32, 1, "i64.atomic.rmw32_u.and")
	OPCi32_atomic_rmw_or          = NewOp(0xfe33, 1, "i32.atomic.rmw.or")
	OPCi64_atomic_rmw_or          = NewOp(0xfe34, 1, "i64.atomic.rmw.or")
	OPCi32_atomic_rmw8_u_or       = NewOp(0xfe35, 1, "i32.atomic.rmw8_u.or")
	OPCi32_atomic_rmw16_u_or      = NewOp(0xfe36, 1, "i32.atomic.rmw16_u.or")
	OPCi64_atomic_rmw8_u_or       = NewOp(0xfe37, 1, "i64.atomic.rmw8_u.or")
	OPCi64_atomic_rmw16_u_or      = NewOp(0xfe38, 1, "i64.atomic.rmw16_u.or")
	OPCi64_atomic_rmw32_u_or      = NewOp(0xfe39, 1, "i64.atomic.rmw32_u.or")
	OPCi32_atomic_rmw_xor         = NewOp(0xfe3a, 1, "i32.atomic.rmw.xor")
	OPCi64_atomic_rmw_xor         = NewOp(0xfe3b, 1, "i64.atomic.rmw.xor")
	OPCi32_atomic_rmw8_u_xor      = NewOp(0xfe3c, 1, "i32.atomic.rmw8_u.xor")
	OPCi32_atomic_rmw16_u_xor     = NewOp(0xfe3d, 1, "i32.atomic.rmw16_u.xor")
	OPCi64_atomic_rmw8_u_xor      = NewOp(0xfe3e, 1, "i64.atomic.rmw8_u.xor")
	OPCi64_atomic_rmw16_u_xor     = NewOp(0xfe3f, 1, "i64.atomic.rmw16_u.xor")
	OPCi64_atomic_rmw32_u_xor     = NewOp(0xfe40, 1, "i64.atomic.rmw32_u.xor")
	OPCi32_atomic_rmw_xchg        = NewOp(0xfe41, 1, "i32.atomic.rmw.xchg")
	OPCi64_atomic_rmw_xchg        = NewOp(0xfe42, 1, "i64.atomic.rmw.xchg")
	OPCi32_atomic_rmw8_u_xchg     = NewOp(0xfe43, 1, "i32.atomic.rmw8_u.xchg")
	OPCi32_atomic_rmw16_u_xchg    = NewOp(0xfe44, 1, "i32.atomic.rmw16_u.xchg")
	OPCi64_atomic_rmw8_u_xchg     = NewOp(0xfe45, 1, "i64.atomic.rmw8_u.xchg")
	OPCi64_atomic_rmw16_u_xchg    = NewOp(0xfe46, 1, "i64.atomic.rmw16_u.xchg")
	OPCi64_atomic_rmw32_u_xchg    = NewOp(0xfe47, 1, "i64.atomic.rmw32_u.xchg")
	OPCi32_atomic_rmw_cmpxchg     = NewOp(0xfe48, 1, "i32.atomic.rmw.cmpxchg")
	OPCi64_atomic_rmw_cmpxchg     = NewOp(0xfe49, 1, "i64.atomic.rmw.cmpxchg")
	OPCi32_atomic_rmw8_u_cmpxchg  = NewOp(0xfe4a, 1, "i32.atomic.rmw8_u.cmpxchg")
	OPCi32_atomic_rmw16_u_cmpxchg = NewOp(0xfe4b, 1, "i32.atomic.rmw16_u.cmpxchg")
	OPCi64_atomic_rmw8_u_cmpxchg  = NewOp(0xfe4c, 1, "i64.atomic.rmw8_u.cmpxchg")
	OPCi64_atomic_rmw16_u_cmpxchg = NewOp(0xfe4d, 1, "i64.atomic.rmw16_u.cmpxchg")
	OPCi64_atomic_rmw32_u_cmpxchg = NewOp(0xfe4e, 1, "i64.atomic.rmw32_u.cmpxchg")
	OPCblock                      = NewOp(0x0002, 1, "block")
	OPCloop                       = NewOp(0x0003, 1, "loop")
	OPCif_                        = NewOp(0x0004, 1, "if")
	OPCelse_                      = NewOp(0x0005, 1, "else")
	OPCend                        = NewOp(0x000b, 1, "end")
	OPCtry_                       = NewOp(0xfb02, 1, "try")
	OPCcatch_                     = NewOp(0xfb03, 1, "catch")
	OPCcatch_all                  = NewOp(0xfb04, 1, "catch_all")

	OPCMaxSingleByteOpcode Opcode = 0xdf
)
